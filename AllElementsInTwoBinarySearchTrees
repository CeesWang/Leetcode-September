/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        ArrayList<Integer> ans = new ArrayList<>();
        ArrayList<Integer> sortedList1 = new ArrayList<>();
        ArrayList<Integer> sortedList2 = new ArrayList<>();
        dfs(root1, sortedList1);
        dfs(root2, sortedList2);
        merge(ans, sortedList1, sortedList2);
        return ans;
    }
    
    public void merge(ArrayList<Integer> ans, ArrayList<Integer> list1, ArrayList<Integer> list2) {
        int i = 0; 
        int j = 0;
        while (i < list1.size() && j < list2.size()) {
            int num1 = list1.get(i);
            int num2 = list2.get(j);
            if (num1 < num2) {
                ans.add(num1);
                i++;
            }
            else {
                ans.add(num2);
                j++;
            }
        }
        while (i < list1.size()) {
            ans.add(list1.get(i));
            i++;
        }
        while (j < list2.size()) {
            ans.add(list2.get(j));
            j++;
        }
    }
    
    public void dfs (TreeNode node, ArrayList<Integer> list) {
        if (node != null) {
            dfs(node.left, list);
            list.add(node.val);
            dfs(node.right, list);
        }
    }
}
