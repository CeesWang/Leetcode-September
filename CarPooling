class Solution {
    public boolean carPooling(int[][] trips, int capacity) {
        PriorityQueue<int []> pickUpQueue = new PriorityQueue<>((a,b) -> a[1] - b[1]);
        PriorityQueue<int []> dropOffQueue = new PriorityQueue<>((a,b) -> a[2] - b[2]);
        for (int i = 0; i < trips.length; ++i) {
            pickUpQueue.add(trips[i]);
            dropOffQueue.add(trips[i]);
        }
        while (!pickUpQueue.isEmpty()) {
            int [] currTrip = pickUpQueue.poll();
            if (currTrip[1] >= dropOffQueue.peek()[2]) {
                while (currTrip[1] >= dropOffQueue.peek()[2]) {
                    capacity += dropOffQueue.poll()[0];
                }                                
            }
            capacity -= currTrip[0];       
            if (capacity < 0) {
                return false;
            }
        }
        return true;
    }
}
